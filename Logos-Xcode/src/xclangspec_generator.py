'''
#
# Run with python3
# Script that generates the Logos xclangspec
# 
# xclangspec_generator is a script created by pr0crustes (https://github.com/pr0crustes)
# that is provided as it is, without any warranty.
# pr0crustes @ 2018 - all rights reserved.
#
'''
import os

global_new_keywords = [
    "// Start Logos Keywords",
    "%group",
    "%hook",
    "%new",
    "%subclass",
    "%property",
    "%end",
    "%config",
    "%hookf",
    "%ctor",
    "%dtor",
    "%init",
    "%class",
    "%c",
    "%orig",
    "%log",
    "// End Logos Keywords",
    "// Start Other Keywords",
    "NSLog",
    "NSString",
    "NSInteger",
    "NSObject",
    "// End Other Keywords"
]


global_ident1 = "Words = ("
global_ident2 = "Chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";"
global_ident3 = "StartChars = \"@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_\";"


class XClangGenerator(object):
    
    def __init__(self):
        self.objc_spec_file = "/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/ObjectiveC.xclangspec"
        self.objc_spec_content = []
        self.new_lines = []

    def __get_loaded_file(self):
        print("Reading File...")
        for line in open(self.objc_spec_file, 'r'):
            if line.strip() and not line.strip().startswith("/"):
                self.objc_spec_content.append(line)

    def __get_parsed_file(self):
        print("Parsing File...")
        for i in range(len(self.objc_spec_content)):
            line = self.objc_spec_content[i].replace("objc", "logos")
            self.new_lines.append(line)
            if global_ident1 in line and i > 3 and global_ident2 in self.objc_spec_content[i-1] and global_ident3 in self.objc_spec_content[i-2]:
                print("Inserting Logos Keywords Into New File...")
                for new_word in global_new_keywords:
                    if new_word.strip().startswith("//"):
                        self.new_lines.append("\t\t\t\t" + new_word + "\n")
                    else:
                        self.new_lines.append("\t\t\t\t\"" + new_word + "\",\n")

    def __save_file(self):
        print("Saving New File...")
        with open("Logos.xclangspec", "w") as file:
            file.write("// Logos xclangspec was generated by spec_gen\n")
            file.write("// Script made by pr0crustes\n")
            for line in self.new_lines:
                file.write(line)

    def execute(self):
        self.__get_loaded_file()
        self.__get_parsed_file()
        self.__save_file()
        print("XClangSpec Generator was successfully runned.")


if __name__ == '__main__':

	os.rename("/opt/MonkeyDev/Logos-Xcode/src/Logos.xc", "/opt/MonkeyDev/Logos-Xcode/src/Logos.xclangspec")
	gen = XClangGenerator()
	gen.execute()

